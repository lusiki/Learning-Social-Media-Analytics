"katolička crkva",     # catholic church
"katolicizam",         # catholicism
"kršćanin",           # christian
"kršćanska denominacija", # christian denomination
"kršćanstvo",       # christianity
"crkva",               # church
"ispovjedaonica",      # confessional
"kongregacija",    # congregational
"konzervativac",       # conservative
"pobožan",             # devout
"biskupija",           # diocese
"doktrina",            # doctrine
"istočne katoličke crkve", # eastern catholic churches
"istočno pravoslavna crkva", # eastern orthodox church
"crkveni",             # ecclesiastical
"episkopalni",         # episcopal
"episkopalianac",      # episcopalian
"etika",               # ethics
"euharistija",         # eucharist
"evanđeoski",          # evangelical
"puna zajednica",      # full communion
"fundamentalist",      # fundamentalist
"grčki jezik",         # greek language
"sveti križ",          # holy cross
"sveta obitelj",       # holy family
"sveta krunica",       # holy rosary
"sveta stolica",       # holy see
"sveto trojstvo",      # holy trinity
"Ignacije Antiohijski", # ignatius of antioch
"neokaljano začeće",  # immaculate conception
"neokaljano srce",     # immaculate heart
"Irski",               # irish
"Talijanski",          # italian
"Jeruzalem",           # jerusalem
"isusovac",            # jesuit
"isusovci",            # jesuits
"Isus Krist",          # jesus christ
"židov",               # jewish
"latinske liturgijske obrede", # latin liturgical rites
"latinski obred",      # latin rite
"latitudinarijanac",   # latitudinarian
"liturgija",           # liturgy
"luteran",             # lutheran
"melkit",              # melkite
"metodist",            # methodist
"mormon",              # mormon
"msgr",                # msgr (this might remain the same as it's an abbreviation)
"musliman",            # muslim
"nacionalist",         # nationalist
"nicejsko vjerovanje", # nicene creed
"časne sestre",        # nuns
"pravoslavac",         # orthodox
"pravoslavlje",        # orthodoxy
"župa",                # parish
"župe",                # parishes
"posebna crkva",       # particular church
"Duhovi",              # pentecost
"pentekostalac",       # pentecostal
"pontif",              # pontiff
"papa",                # pope
"presbiterijanac",     # presbyterian
"svećenik",            # priest
"privatni",            # private
"protestant",          # protestant
"protestantska reformacija", # protestant reformation
"javni",               # public
"vjera",               # religion
"vjerski",             # religious
"republikanac",        # republican
"rimski",              # roman
"rimokatolički",       # roman catholic
"rimokatolička crkva", # roman catholic church
"Rim",                 # rome
"sveto srce",          # sacred heart
"salezijanac",         # salesian
"Smirna",              # smyrna
"sv. Toma Akvinski",   # st. thomas aquinas
"teološki",            # theological
"teologija",           # theology
"tradicija",           # tradition
"crkva",
"biskup",
"Kaptol",
"časna sestra",
"svećenik",
"župnik",
"vjernik",
"kardinal",
"papa",
"sveti otac",
"redovnik",
"redovnica",
"kršćanstvo",
"vjera",
"Gospa",
"Bog",
"Isus",
"katolički",
"misa",
"pričest",
"krizma",
"grijeh",
"vjeroučitelj",
"vjeronauk",
"blagoslov",
"svjedočanstvo",
"relikvija",
"stigma",
"duhovnost",
"don",
"fra",
"velečasni",
"zaređenje",
"krunica",
"vjeronauk",
"ukazanje"            # tradition
) %>% tolower()
cro_catoliq <- sapply(cro_catoliq, write_tokens)
cro_catoliq <- sapply(cro_catoliq, write_tokens)
cro_catoliq <- sapply(strsplit(cro_catoliq, "\t"), `[`, 2)
cro_catoliq <- enframe(cro_catoliq, name = "name", value = "root")
cro_catoliq
# Sample data frame
df <- data.frame(text = c("I am a member of the anglican church",
"I am an atheist",
"I love the catholic church",
"I am a baptist",
"I don't belong to any church"))
df
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "atheist", "baptist", "catholic")
# Add a logical column for matches
df <- df %>%
mutate(has_match = map_lgl(text, ~ any(str_detect(.x, words_vector))),
matched_words = map(text, ~ paste(words_vector[str_detect(.x, words_vector)], collapse=", ")))
df
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "athei", "baptist", "catholic")
# Add a logical column for matches
df <- df %>%
mutate(has_match = map_lgl(text, ~ any(str_detect(.x, words_vector))),
matched_words = map(text, ~ paste(words_vector[str_detect(.x, words_vector)], collapse=", ")))
setDT(df)
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "atheist", "baptist", "catholic")
# Add columns for matches
df[, `:=` (has_match = sapply(text, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(text, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
print(df)
# Sample data frame
df <- data.frame(text = c("I am a member of the anglican church",
"I am an atheist",
"I love the catholic church",
"I am a baptist",
"I don't belong to any church",
"Ja sam biskup od rima"))
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "athei", "baptist", "catholic", "biskup rima")
# Add a logical column for matches
df <- df %>%
mutate(has_match = map_lgl(text, ~ any(str_detect(.x, words_vector))),
matched_words = map(text, ~ paste(words_vector[str_detect(.x, words_vector)], collapse=", ")))
df
# Add columns for matches
df[, `:=` (has_match = sapply(text, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(text, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
setDT(df)
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "atheist", "baptist", "catholic")
# Add columns for matches
df[, `:=` (has_match = sapply(text, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(text, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
print(df)
# Sample data frame
df <- data.frame(text = c("I am a member of the anglican church",
"I am an atheist",
"I love the catholic church",
"I am a baptist",
"I don't belong to any church",
"Ja sam biskup rima"))
setDT(df)
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "atheist", "baptist", "catholic", "biskup rim" )
# Add columns for matches
df[, `:=` (has_match = sapply(text, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(text, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
print(df)
write_xlsx(cro_catoliq,"D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/katolički_izrazi.xlsx")
setDT(all)
# Words vector (for simplicity, using a shortened version)
words_vector <- as.character(katolički_izrazi$name)
View(cro_catoliq)
# Words vector (for simplicity, using a shortened version)
words_vector <- as.character(cro_catoliq$name)
words_vector
library(dplyr)
library(stringr)
# Sample data frame
df <- data.frame(text = c("I am a member of the anglican church",
"I am an atheist",
"I love the catholic church",
"I am a baptist",
"I don't belong to any church",
"Ja sam biskup rima"))
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "athei", "baptist", "catholic", "biskup rima")
# Add a logical column for matches
df <- df %>%
mutate(has_match = map_lgl(text, ~ any(str_detect(.x, words_vector))),
matched_words = map(text, ~ paste(words_vector[str_detect(.x, words_vector)], collapse=", ")))
setDT(df)
# Words vector (for simplicity, using a shortened version)
words_vector <- c("anglican", "atheist", "baptist", "catholic", "biskup rima" )
# Add columns for matches
df[, `:=` (has_match = sapply(text, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(text, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
print(df)
setDT(all)
# Words vector (for simplicity, using a shortened version)
words_vector <- as.character(cro_catoliq$name)
all[1:1000,
all[1:1000,]
# Add columns for matches
proba <- all[1:1000, `:=` (has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
View(proba)
all[SOURCE_TYPE=="web",]
all <- all[SOURCE_TYPE=="web",]
# Add columns for matches
proba <- all[5000, `:=` (has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
# Add columns for matches
proba <- all[1:5000, `:=` (has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", ")))]
View(proba)
batch_size <- 5000
# Calculate the number of batches
num_batches <- ceiling(nrow(all) / batch_size)
num_batches
batch_size <- 5000
# Calculate the number of batches
num_batches <- ceiling(nrow(all) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(MktFULLtxt))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(MktFULLtxt))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
batch_size <- 5000
# Calculate the number of batches
num_batches <- ceiling(nrow(all) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(MktFULLtxt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
MktFULLtxt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
MktFULLtxt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
batch_size <- 2000
# Calculate the number of batches
num_batches <- ceiling(nrow(all) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
}
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
assign(paste0("batch_", i), as.data.frame(batch_data))
}
View(batch_9)
# Loop through each batch
for (i in 1:num_batches) {
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
#  assign(paste0("batch_", i), as.data.frame(batch_data))
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
filename <- paste0("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/katolički clanci/batch_", i, ".xlsx")
# Write the current batch to an .xlsx file
write.xlsx(batch_data, filename, overwrite = TRUE)
cat(sprintf("Batch %d saved to %s.\n", i, filename))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
#  assign(paste0("batch_", i), as.data.frame(batch_data))
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
filename <- paste0("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/katolički clanci/batch_", i, ".xlsx")
# Write the current batch to an .xlsx file
write.xlsx(batch_data, filename, overwrite = TRUE)
cat(sprintf("Batch %d saved to %s.\n", i, filename))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
#  assign(paste0("batch_", i), as.data.frame(batch_data))
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
filename <- paste0("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/katolički clanci/batch_", i, ".xlsx")
# Write the current batch to an .xlsx file
write.xlsx(batch_data, filename)
cat(sprintf("Batch %d saved to %s.\n", i, filename))
}
words_vector
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, function(x) any(sapply(words_vector, grepl, x))),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[sapply(words_vector, grepl, x)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
#  assign(paste0("batch_", i), as.data.frame(batch_data))
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# filename <- paste0("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/katolički clanci/batch_", i, ".xlsx")
# Write the current batch to an .xlsx file
#  write.xlsx(batch_data, filename)
#  cat(sprintf("Batch %d saved to %s.\n", i, filename))
}
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
library(stringi)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
View(all)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(writexl)
# fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# fullDtaTxt <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_TXT.csv")
all <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
#
#all <- all %>% mutate(V1 = as.numeric(V1))
# dt <- dt %>% filter(SOURCE_TYPE == "web") %>%
#   distinct(URL,.keep_all = TRUE)
#
# dt <- dt %>%
#   mutate(V1 = as.numeric(V1)) %>%
#   distinct(V1, .keep_all = T)# %>%
#  # slice(1:300000)
dt <- read_excel("D:/LUKA/Freelance/Mediatoolkit/catholiq.xlsx") %>% select(-match)
