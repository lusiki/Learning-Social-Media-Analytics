filepath %>%
read.csv() %>%
unnest_tokens(word, FULL_TEXT, token = "words") %>%
filter(str_detect(word, "humanitar")) %>%
distinct(TITLE, URL, .keep_all = F)
}
tokenized_chunks <- map(filepath[1:3], tokenize_chunk)
tokenized_chunks_df <- rbind(tokenized_chunks)
tokenized_chunks_df <- rbind.data.frame(tokenized_chunks)
tokenized_chunks_df <- rbind(tokenized_chunks)
tokenized_chunks_df <- bind_rows(tokenized_chunks)
filepath
rm(chunk_1,chunk_2)
tokenize_chunk <- function(filepath) {
filepath %>%
read.csv() %>%
unnest_tokens(word, FULL_TEXT, token = "words") %>%
filter(str_detect(word, "humanitar")) %>%
distinct(TITLE, URL, .keep_all = F)
}
tokenized_chunks <- map(filepath, tokenize_chunk)
tokenized_chunks_df <- bind_rows(tokenized_chunks)
View(tokenized_chunks_df)
# fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# fullDtaTxt <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_TXT.csv")
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
humanitar <- dt %>%
intersect(tokenized_chunks_df)
tokenized_chunks_df
tokenized_chunks_df
df_filtered
df_filtered <- dt %>%
filter(URL %in% tokenized_chunks_df$URL)
View(df_filtered)
write.csv(df_filtered, file = "D:/LUKA/Freelance/Mediatoolkit/Humanitar.csv", row.names = T)
write.csv2(df_filtered, file = "D:/LUKA/Freelance/Mediatoolkit/Humanitar.csv", row.names = T)
fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(purrr)
fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
dta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# select web
dta <- dta %>%
filter(SOURCE_TYPE == "web")
# read data
dta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# select web
dta <- dta %>%
filter(SOURCE_TYPE == "web")
nrow(dta)
range(dta$DATE)
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
daily_counts
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_bar(stat = "identity") +
labs(x = "Date", y = "Number of Articles")
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# daily mean
daily_mean <- dta %>%
group_by(DATE) %>%
summarise(mean_rows = mean(n()))
# print the results
print(daily_mean)
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# create plot
ggplot(data = daily_mean, aes(x = DATE, y = mean_rows)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# daily mean
daily_mean <- dta %>%
summarise(mean_rows = mean(n()))
print(daily_mean)
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
stat_summary(fun.y = mean, geom = "point", shape = 4, size = 4, color = "red", fill = "white")
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
stat_summary(fun.y = mean, geom = "point", shape = 4, size = 4)
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
geom_text(aes(x = max(count), y = min(count), label = paste0("Mean: ", round(daily_counts$count, 2))), hjust = 1, vjust = 0)
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
mean_wt <- mean(daily_counts$count)
mean_wt
mean_dta <- mean(daily_counts$count)
mean_count <- mean(daily_counts$count)
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
geom_text(aes(x = max(count), y = min(count), label = paste0("Mean: ", round(mean_count, 2))), hjust = 1, vjust = 0)
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
daily_counts
summ <- daily_counts %>%
group_by(DATE) %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2) %>%
mutate(lab = paste("min = ", min, "\nmax = ", max, "\nmean = ", mean,
"\nq1 = ", q1, "\nmedian = ", median, "\nq3 = ", q3, "\nsd = ", sd),
position=c(1.5, 0.8, 0.25, -2))
summ <- daily_counts %>%
group_by(DATE) %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
summ <- daily_counts %>%
#  group_by(DATE) %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
geom_text(summ, hjust = 1, vjust = 0)
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles") +
geom_text(summ)
summ <- daily_counts %>%
#  group_by(DATE) %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
summ
summ
# create plot
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
names(dta)
dta %>%
group_by(FROM) %>%
summarise(count = n())
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
arrange(desc(count))
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
arrange(desc(count))
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count) * 100)
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = count / sum(count) * 100) %>%
arrange(desc(count))
mutate(percent = round((count / sum(count) * 100),2) %>%
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100),2) %>%
arrange(desc(count))
mutate(percent = round((count / sum(count) * 100),2) %>%
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round((count / sum(count) * 100),2)) %>%
arrange(desc(count))
dta %>%
dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(dta, options = list(scrollX = TRUE, scrollY = "500px"))
activity <- dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(activity, options = list(scrollX = TRUE, scrollY = "500px"))
dta %>%
group_by(FROM, DATE) %>%
summarise(avg_count = mean(n()))
group_by(FROM %>%
dta %>%
group_by(FROM) %>%
summarise(avg_count = mean(n()))
dta %>%
dta %>%
group_by(FROM) %>%
summarise(avg_count = mean(n()))
dta %>%
group_by(FROM) %>%
summarise(avg_count = mean(n()))%>%
arrange(desc(avg_count))
dta %>%
group_by(AUTHOR) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
View(activity)
# Authors by activity
authors <- dta %>%
group_by(AUTHOR) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(authors, options = list(scrollX = TRUE, scrollY = "500px"))
names(dta)
# Portals by reach
reach <- dta %>%
group_by(FROM) %>%
summarise(reach = sum(REACH)) %>%
mutate(percent = round(reach / sum(reach) * 100,2)) %>%
arrange(desc(reach))
datatable(activity, options = list(scrollX = TRUE, scrollY = "500px"))
datatable(reach, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by reach
reach <- dta %>%
group_by(FROM) %>%
summarise(reach = sum(REACH)) %>%
arrange(desc(reach))
datatable(reach, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by virality
virality <- dta %>%
group_by(FROM) %>%
summarise(reach = sum(VIRALITY)) %>%
arrange(desc(reach))
# Portals by virality
virality <- dta %>%
group_by(FROM) %>%
summarise(virality = sum(VIRALITY)) %>%
arrange(desc(virality))
# Portals by virality
virality <- dta %>%
group_by(FROM) %>%
summarise(virality = sum(VIRALITY)) %>%
arrange(desc(virality))
dta %>%
group_by(FROM) %>%
summarise(virality = sum(VIRALITY))
# Portals by virality
virality <- dta %>%
group_by(FROM) %>%
summarise(virality = sum(VIRALITY, na.rm = T)) %>%
arrange(desc(virality))
dta$VIRALITY
# Portals by virality
virality <- dta %>%
group_by(FROM) %>%
mutate(VIRALITY = as.numeric(VIRALITY)) %>%
summarise(virality = sum(VIRALITY, na.rm = T)) %>%
arrange(desc(virality))
# Portals by virality
like <- dta %>%
group_by(FROM) %>%
summarise(like = sum(LIKE_COUNT, na.rm = T)) %>%
arrange(desc(like))
datatable(like, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by virality
like <- dta %>%
group_by(FROM) %>%
summarise(like = sum(LIKE_COUNT, na.rm = T)) %>%
mutate(percent = round(like / sum(like) * 100,2)) %>%
arrange(desc(like))
datatable(like, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by comments
comment <- dta %>%
group_by(FROM) %>%
summarise(comment = sum(COMMENT_COUNT, na.rm = T)) %>%
mutate(percent = round(comment / sum(comment) * 100,2)) %>%
arrange(desc(like))
datatable(comment, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by comments
comment <- dta %>%
group_by(FROM) %>%
summarise(comment = sum(COMMENT_COUNT, na.rm = T)) %>%
mutate(percent = round(comment / sum(comment) * 100,2)) %>%
arrange(desc(comment))
datatable(comment, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by shares
shares <- dta %>%
group_by(FROM) %>%
summarise(shares = sum(SHARE_COUNT, na.rm = T)) %>%
mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(shares))
datatable(shares, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by activity
authors <- dta %>%
group_by(AUTHOR) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(authors, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by reach
reach <- dta %>%
group_by(AUTHOR) %>%
summarise(reach = sum(REACH)) %>%
arrange(desc(reach))
datatable(reach, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by likes
like <- dta %>%
group_by(AUTHOR) %>%
summarise(like = sum(LIKE_COUNT, na.rm = T)) %>%
mutate(percent = round(like / sum(like) * 100,2)) %>%
arrange(desc(like))
datatable(like, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by comments
comment <- dta %>%
group_by(AUTHOR) %>%
summarise(comment = sum(COMMENT_COUNT, na.rm = T)) %>%
mutate(percent = round(comment / sum(comment) * 100,2)) %>%
arrange(desc(comment))
datatable(comment, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by shares
shares <- dta %>%
group_by(AUTHOR) %>%
summarise(shares = sum(SHARE_COUNT, na.rm = T)) %>%
mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(shares))
datatable(shares, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by activity
activity <- dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(activity, options = list(scrollX = TRUE, scrollY = "500px"))
dta %>%
group_by(TITLE) %>%
summarise(count = mean(n()))%>%
arrange(desc(count))
dta %>%
group_by(V1) %>%
summarise(count = mean(n()))%>%
arrange(desc(count))
dta %>%
group_by(V1) %>%
summarise(count = n()) %>%
arrange(desc(count))
dta %>%
group_by(URL) %>%
summarise(count = n()) %>%
arrange(desc(count))
dta %>%
group_by(TITLE) %>%
summarise(count = n()) %>%
arrange(desc(count))
dta %>%
group_by(TITLE) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Arcicles by reach
reach <- dta %>%
group_by(TITLE) %>%
summarise(reach = sum(REACH)) %>%
arrange(desc(reach))
datatable(reach, options = list(scrollX = TRUE, scrollY = "500px"))
# Arcicles by reach
reach <- dta %>%
group_by(TITLE) %>%
summarise(reach = sum(REACH)) %>%
arrange(desc(reach)) %>%
slice(1:1000)
datatable(articles, options = list(scrollX = TRUE, scrollY = "500px"))
datatable(reach, options = list(scrollX = TRUE, scrollY = "500px"))
# Arcicles by activity
articles <-  dta %>%
group_by(TITLE, URL) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Arcicles by activity
articles <-  dta %>%
group_by(TITLE, URL) %>%
summarise(count = n()) %>%
arrange(desc(count))
knitr::opts_chunk$set(echo = TRUE)
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T),
across(URL, FULL_TEXT)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(likes)) %>%
slice(1:200) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
library(tidyverse)
library(readxl)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/Humanitar.csv") %>%
select(-V1)
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T),
across(URL, FULL_TEXT)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(likes)) %>%
slice(1:200) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
View(dt)
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T),
across(URL)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(likes)) %>%
slice(1:200) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T),
across(URL)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(likes))
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T),
across(URL)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(likes)) %>%
slice(1:200)
dt %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(shares = sum(REACH, na.rm = T),
likes = sum(LIKE_COUNT, na.rm = T),
comments = sum(COMMENT_COUNT, na.rm = T),
shares = sum(SHARE_COUNT, na.rm = T)) %>%
# mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(comments)) %>%
slice(1:200) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
