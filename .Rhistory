dataset %>%
inner_join(NRCpn, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Number of words") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
theme_economist() -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu(stemmed,30)
stemmed %>%
inner_join(NRCpn,by="word") %>%
count(word, sentiment) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
stemmed %>%
inner_join(NRCpn,by="word") %>%
count(word, Emotion) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
stemmed %>%
inner_join(NRCpn,by="word") %>%
count(word, Emotion) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ Emotion, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
SENTIMENT <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percentSENTIMENT = round(N / sum(N) * 100,2))
SENTIMENT %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
sentiment <- data.frame(
number = c(1, 2, 3),
text = c("Pozitivan", "Neutralan", "Negativan")
)
ggplot(data = dta, aes(x = SENTIMENT)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
ggtitle("Sentiment") +
xlab("Sentiment") +
ylab("Frequency") #+
stemmed %>%
filter(INDUSTRIJA == 1) %>%
inner_join(NRCpn,by="word") %>%
count(word, sentiment) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                 sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
stemmed %>%
filter(INDUSTRIJA == 1) %>%
inner_join(NRCpn,by="word") %>%
count(word, Emotion) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                 sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ Emotion, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 1),30)
stemmed %>%
filter(INDUSTRIJA == 1) %>%
inner_join(NRCpn,by="word") %>%
count(word, Emotion) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                 sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ Emotion, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 1),30)
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 1),30)
stemmed %>%
filter(INDUSTRIJA == 11) %>%
inner_join(NRCpn,by="word") %>%
count(word, Emotion) %>%
top_n(200) %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
#                                 sentiment == 1 ~ "-",
#                                 sentiment == 2 ~ "+")) %>%
acast(word ~ Emotion, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 11),30)
## Sentiment
doprinos_sentimentu_full <- function(dataset, no = n) {
dataset %>%
inner_join(NRC, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion,) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Number of words") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
theme_economist() -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu_full(stemmed,30)
doprinos_sentimentu_full(stemmed,30)
## Sentiment
doprinos_sentimentu_full <- function(dataset, no = n) {
dataset %>%
inner_join(NRC, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion,) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Number of words") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
theme_economist() -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu_full(stemmed,30)
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger","Anticipation","Disgust","Fear","Joy","Sadness","Surprise","Trust"))
doprinos_sentimentu_full(stemmed,30)
Crosentilex_sve
get_sentiments("nrc")
library(textdata)
install.packages("textdata")
library(textdata)
get_sentiments("nrc")
stemmed %>%
inner_join(NRCpn, by = "word") %>%
count(word, Emotion,sort = TRUE)
stemmed %>%
inner_join(NRCpn, by = "word")
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(word, Emotion,sort = TRUE)
View(stemmed)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion,sort = TRUE)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Setiment = Negative - Positive)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Setiment = Positive - Negative)
proba <- stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Setiment = Positive - Negative)
positive_count <- nrow(filter(proba, Sentiment > 0))
proba
positive_count <- nrow(filter(proba, Setiment > 0))
# Count rows with negative sentiment values
negative_count <- nrow(filter(data, Setiment < 0))
positive_count
negative_count
# Count rows with negative sentiment values
negative_count <- nrow(filter(proba, Setiment < 0))
negative_count
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Sentiment = Positive - Negative) %>%
summarise(
positive_count = sum(Sentiment > 0),
negative_count = sum(Sentiment < 0)
)
stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Sentiment = Positive - Negative)
proba <- stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Sentiment = Positive - Negative)
positive_count <- nrow(filter(proba, Setiment > 0))
# Count rows with negative sentiment values
negative_count <- nrow(filter(proba, Setiment < 0))
print(paste("Number of rows with positive sentiment values:", positive_count))
print(paste("Number of rows with negative sentiment values:", negative_count))
proba <- stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Sentiment = Positive - Negative)
positive_count <- nrow(filter(proba, Setiment > 0))
proba <- stemmed %>%
inner_join(NRCpn, by = "word") %>%
group_by(V1) %>%
count(Emotion) %>%
spread(Emotion, n) %>%
mutate(Sentiment = Positive - Negative)
positive_count <- nrow(filter(proba, Sentiment > 0))
negative_count <- nrow(filter(proba, Sentiment < 0))
print(paste("Broj članaka sa  positive sentimentom:", positive_count))
print(paste("Broj članaka sa  negative sentimentom:", negative_count))
CroSentilex_Gold
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE) %>%
rename(word = "V1", sentiment = "V2" )
Encoding(CroSentilex_Gold$word) <- "UTF-8"
CroSentilex_Gold[1,1] <- "dati"
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
CroSentilex_Gold
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
# Read In
original <- read.xlsx("D:/LUKA/Freelance/Mediatoolkit/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- read.xlsx("C:/Users/Lukas/OneDrive/Desktop/Native.xlsx", sheetIndex = 1)
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
stemmed <- readRDS("D:/LUKA/Freelance/Mediatoolkit/native_token_stemm.rds")
stemmed <- stemmed %>%
rename("wordp" = "word") %>%
rename("word" = "transformed_column")
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8")  %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "NEG")
CroSentilex_p  <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8") %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "POZ")
Crosentilex_sve <- rbind(setDT(CroSentilex_n), setDT(CroSentilex_p))
# check lexicon data
#head(sample_n(Crosentilex_sve,1000),15)
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE) %>%
rename(word = "V1", sentiment = "V2" )
Encoding(CroSentilex_Gold$word) <- "UTF-8"
CroSentilex_Gold[1,1] <- "dati"
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
# check lexicon data
#head(sample_n(CroSentilex_Gold,100),15)
LilaHR  <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% select (-"...1")
LilaHR_long <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean_long.xlsx", sheet = "Sheet1") %>% select (-"...1")
# Print the long format data
#print(data_long)
#proba <- read.csv2("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHRcsv.csv", encoding = "UTF-8")
#df <- separate_rows(LilaHR, HR, sep = ", ")
#
# zero_rows_count <- sum(apply(df[-1], 1, function(row) all(row == 0)))
# print(zero_rows_count)
#
# filtered_df <- df %>%
#   filter(!apply(.[,-1], 1, function(row) all(row == 0)))
#
# write.xlsx(filtered_df, "C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_.xlsx" )
# create stop words
stopwords_cro <- get_stopwords(language = "hr", source = "stopwords-iso")
# check stopwords data
#head(sample_n(stopwords_cro,100),15)
# extend stop words
my_stop_words <- tibble(
word = c(
"jedan","mjera", "može", "možete", "mogu", "kad", "sada", "treba", "ima", "osoba",
"e","prvi", "dva","dvije","drugi",
"tri","treći","pet","kod",
"ove","ova",  "ovo","bez", "kod",
"evo","oko",  "om", "ek",
"mil","tko","šest", "sedam",
"osam",   "čim", "zbog",
"prema", "dok","zato", "koji",
"im", "čak","među", "tek",
"koliko", "tko","kod","poput",
"baš", "dakle", "osim", "svih",
"svoju", "odnosno", "gdje",
"kojoj", "ovi", "toga",
"ubera", "vozača", "hrvatskoj", "usluge", "godine", "više", "taksi", "taxi", "taksija", "taksija", "kaže", "rekao", "19"," aee", "ae","bit.ly", "https", "one", "the"
),
lexicon = "lux"
)
# full set with diacritics
cro_sw_full_d <- tibble(word = c("a","ako","ali","baš","bez","bi","bih","bila","bili","bilo","bio","bismo","bit","biti","bolje","bude","čak","čega","čemu","često","četiri","čime","čini","će","ćemo","ćete","ću","da","dakle","dalje","dan","dana","dana","danas","dio","do","dobro","dok","dosta","dva","dvije","eto","evo","ga","gdje","god","godina","godine","gotovo","grada","i","iako","ići","ih","ili","im","ima","imaju","imali","imam","imao","imati","inače","ipak","isto","iz","iza","između","ja","jako","je","jedan","jedna","jednog","jednom","jednostavno","jednu","jer","joj","još","ju","ka","kad","kada","kaj","kako","kao","kaže","kod","koja","koje","kojeg","kojeg","kojem","koji","kojih","kojim","kojima","kojoj","kojom","koju","koliko","kraju","kroz","li","malo","manje","me","među","međutim","mene","meni","mi","milijuna","mislim","mjesto","mnogo","mogao","mogli","mogu","moj","mora","možda","može","možemo","možete","mu","na","način","nad","naime","nakon","nam","naravno","nas","ne","neće","nego","neka","neke","neki","nekog","nekoliko","neku","nema","nešto","netko","ni","nije","nikad","nisam","nisu","ništa","niti","no","njih","o","od","odmah","odnosno","oko","on","ona","onda","oni","onih","ono","opet","osim","ova","ovaj","ovdje","ove","ovim","ovo","ovog","ovom","ovu","pa","pak","par","po","pod","poput","posto","postoji","pred","preko","prema","pri","prije","protiv","prvi","puno","put","radi","reći","s","sa","sad","sada","sam","samo","sati","se","sebe","si","smo","ste","stoga","strane","su","svaki","sve","svi","svih","svoj","svoje","svoju","što","ta","tada","taj","tako","također","tamo","te","tek","teško","ti","tih","tijekom","time","tko","to","tog","toga","toj","toliko","tom","tome","treba","tu","u","uopće","upravo","uvijek","uz","vam","vas","već","vi","više","vrijeme","vrlo","za","zapravo","zar","zato","zbog","zna","znači"),
lexicon = "boras")
stop_corpus <- my_stop_words %>%
bind_rows(stopwords_cro)
stop_corpus <- stop_corpus %>%
bind_rows(cro_sw_full_d)
# check stopwords data
#head(sample_n(stop_corpus,100),15)
CroSentilex_Gold
stop=c('biti','jesam','budem','sam','jesi','budeš','si','jesmo','budemo','smo','jeste','budete','ste','jesu','budu','su','bih','bijah','bjeh','bijaše','bi','bje','bješe','bijasmo','bismo','bjesmo','bijaste','biste','bjeste','bijahu','biste','bjeste','bijahu','bi','biše','bjehu','bješe','bio','bili','budimo','budite','bila','bilo','bile','ću','ćeš','će','ćemo','ćete','želim','želiš','želi','želimo','želite','žele','moram','moraš','mora','moramo','morate','moraju','trebam','trebaš','treba','trebamo','trebate','trebaju','mogu','možeš','može','možemo','možete')
istakniSlogotvornoR <- function(niz) {
stringr::str_replace_all(niz, "(^|[^aeiou])r($|[^aeiou])", "\\1R\\2")
}
imaSamoglasnik <- function(niz) {
!is.na(stringr::str_detect(istakniSlogotvornoR(niz), "[aeiouR]"))
}
transformiraj <- function(pojavnica) {
for(i in 1:nrow(transformacije)) {
trazi <- transformacije[i, 1]
zamijeni <- transformacije[i, 2]
if (endsWith(pojavnica, trazi)) {
return(sub(paste0(trazi, "$"), zamijeni, pojavnica))
}
}
return(pojavnica)
}
korjenuj <- function(pojavnica) {
for(pravilo in pravila) {
dioba <- stringr::str_match(pojavnica, pravilo)
if (!is.na(dioba[2])) {
if (imaSamoglasnik(dioba[2]) && nchar(dioba[2]) > 1) {
return(dioba[2])
}
}
}
return(pojavnica)
}
pravila <- lapply(strsplit(trimws(readLines('C:/Users/Lukas/Dropbox/Mislav@Luka/rules.txt')), ' '), function(x) paste0('^(', x[1], ')(', x[2], ')$'))
transformacije <- as.data.frame(do.call(rbind, strsplit(trimws(readLines('C:/Users/Lukas/Dropbox/Mislav@Luka/transformations.txt')), '\t')))
#text <- n_tokenTidy$word %>% head(1000)
#text <- tolower(readLines(input_file))
#tokens <- unlist(stringi::stri_extract_all_words(text))
write_tokens <- function(token) {
if (token %in% stop) {
return(paste0(token, '\t', token))
} else {
return(paste0(token, '\t', korjenuj(transformiraj(token))))
}
}
proba <- LilaHR %>%
mutate(
word_korijen = sapply(word, function(x) {
result <- sapply(x, write_tokens)
extracted <- sapply(strsplit(result, "\t"), `[`, 2)
return(extracted)
})
)
LilaHR <- LilaHR %>% rename("word" = "HR")
proba <- CroSentilex_Gold %>%
#  slice(1:500) %>%
mutate(
results = map(word, write_tokens),
korijen = map_chr(results, ~ str_extract(.x, "(?<=\t)[^\t]+$")),
rijec = map_chr(results, ~ str_extract(.x, "^[^\t]+(?=\t)"))
) %>%
select(-results)
CroSentilex_Gold
stemmed %>%
inner_join(CroSentilex_Gold, by = "word")
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
spread(sentiment, n)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
spread(sentiment, n) %>%
mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
sentiment == 1 ~ "-",
sentiment == 2 ~ "+"))
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
spread(sentiment, n)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
spread(sentiment, n)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment)
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
mutate(sentiment = case_when(sentiment == 0 ~ "Neutral",
sentiment == 1 ~ "Negative",
sentiment == 2 ~ "Positive"))
stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
mutate(sentiment = case_when(sentiment == 0 ~ "Neutral",
sentiment == 1 ~ "Negative",
sentiment == 2 ~ "Positive")) %>%
spread(sentiment, n)
proba <- stemmed %>%
inner_join(CroSentilex_Gold, by = "word") %>%
group_by(V1) %>%
count(sentiment) %>%
mutate(sentiment = case_when(sentiment == 0 ~ "Neutral",
sentiment == 1 ~ "Negative",
sentiment == 2 ~ "Positive")) %>%
spread(sentiment, n) %>%
mutate(Sentiment_netto = Positive - Negative)
positive_count <- nrow(filter(proba, Sentiment_netto > 0))
negative_count <- nrow(filter(proba, Sentiment_netto < 0))
print(paste("Broj članaka sa  positive sentimentom:", positive_count))
print(paste("Broj članaka sa  negative sentimentom:", negative_count))
print(paste("Broj članaka sa  positive sentimentom:", positive_count))
