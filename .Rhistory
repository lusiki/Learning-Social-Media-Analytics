mutate(
full_text = tolower(FULL_TEXT),
match = str_c(institucije, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
institucije <- bind_rows(results)
filtered_df <- institucije %>%
filter(str_detect(full_text, pattern_institucije))
View(filtered_df)
politika <- c("Hod","život", "obitelji", "prolife", "poništenje", "ugovora", "sekularizacija", "sekularna","država", "klerikalizam", "ruši","vlast", "veličaju" ,"ustaštvo", "oduzimaju", "prava", "ženama", "katoličku","državu", "afera", "zataškavanje", "Kaptol", "šutnja", "Rimski","vjeronauk" ,"škola", "vatikanski", "ugovori", "vatikanska", "banka" ,"klerikalna", "vlast","država","odvojena", "potiče", "homofobiju", "rodna", "ideologija", "klerikalizam", "ravnozemljaši", "gay", "brak", "podržavali", "ustaše", "podržavali", "naciste", "blagoslovili", "rat", "Hrvatska", "sekularna","katolička", "crkva", "vlada","Hrvatskom","žene") %>% tolower()
politika <- c("Hod","život", "obitelji", "prolife", "poništenje", "ugovora", "sekularizacija", "sekularna","država", "klerikalizam", "ruši","vlast", "veličaju" ,"ustaštvo", "oduzimaju", "prava", "ženama", "katoličku","državu", "afera", "zataškavanje", "Kaptol", "šutnja", "Rimski","vjeronauk" ,"škola", "vatikanski", "ugovori", "vatikanska", "banka" ,"klerikalna", "vlast","država","odvojena", "potiče", "homofobiju", "rodna", "ideologija", "klerikalizam", "ravnozemljaši", "gay", "brak", "podržavali", "ustaše", "podržavali", "naciste", "blagoslovili", "rat", "Hrvatska", "sekularna","katolička", "crkva", "vlada","Hrvatskom","žene") %>% tolower()
pattern_politika <- str_c("\\b(", str_c(politika, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble()  %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(politika, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
politika <- bind_rows(results)
View(politika)
filtered_df <- politika %>%
filter(str_detect(full_text, pattern_politika))
filtered_df %>% group_by(key_word) %>% count() %>% arrange(desc(n))
View(politika)
pomocno <- c( "smijenjen","konzervativci", "tradicionalisti", "pobačaj", "abortus", "aktivisti", "aktivizam", "jezuiti", "nazadan", "zaostao", "neobrazovan", "privilegije" , "privilegiran", "diskriminacija", "nacionalizam", "nacionalisti", "ekstremisti", "otpušten", "prekrštavanje", "izopćen", "izbačen", "bludničio",  "posvećenje", "inkardiniran", "inkardinacija",  "mračno doba", "razotkrio", "prijavio", "bludničio", "pronevjerio", "homofobijam", "zlodjela", "progoni", "dogma", "kontroverzni" , "moderni", "svećenik", "tolerantna", "vjera", "vjerska", "policija", "vjerska", "kontrola", "crkveni", "mediji", "vjerski" ,"mediji", "ukidanje", "homofob", "pedofil", "homoseksualnost", "patrijarhat", "čudesno" , "ozdravljenje", "čudo")
pattern_pomocno <- str_c("\\b(", str_c(pomocno, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble() %>%
select(V1, DATE, TITLE, URL, FULL_TEXT) %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(pomocno, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
dta <- fread("D:/LUKA/Freelance/Mediatoolkit/Humanitar.csv")
dta <- dta[,-1]
# date range
range(dta$DATE)
# number of articles
nrow(dta)
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
# descriptives
summ <- daily_counts %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
# create plot of articles over time
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# Portals by activity
activity <- dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
View(dta)
# Portals by activity
source_type <- dta %>%
group_by(SOURCE_TYPE) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(source_type, options = list(scrollX = TRUE, scrollY = "500px"))
dta %>% filter(SOURCE_TYPE== "comment")
dta %>% filter(SOURCE_TYPE== "comment") -> comment
View(comment)
# Portals by activity
activity <- dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(activity, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by activity
activity <- dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
# Portals by reach
reach <- dta%>%
filter(SOURCE_TYPE == "web")%>%
group_by(FROM) %>%
summarise(reach = sum(REACH)) %>%
arrange(desc(reach))
# Portals by comments
comment <- dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(FROM) %>%
summarise(comment = sum(COMMENT_COUNT, na.rm = T)) %>%
mutate(percent = round(comment / sum(comment) * 100,2)) %>%
arrange(desc(comment))
datatable(comment, options = list(scrollX = TRUE, scrollY = "500px"))
# Portals by shares
shares <- dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(FROM) %>%
summarise(shares = sum(SHARE_COUNT, na.rm = T)) %>%
mutate(percent = round(shares / sum(shares) * 100,2)) %>%
arrange(desc(shares))
datatable(shares, options = list(scrollX = TRUE, scrollY = "500px"))
# Authors by activity
authors <- dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(AUTHOR) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(authors, options = list(scrollX = TRUE, scrollY = "500px"))
# Articles by activity
articles <-  dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(count = n(),across(URL)) %>%
arrange(desc(count)) %>%
slice(1:1000)
datatable(articles, options = list(scrollX = TRUE, scrollY = "500px"))
dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(count = n(),across(URL)) %>%
arrange(desc(count)) %>%
slice(1:1000)
# Articles by activity
articles <-  dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(count = n(),across(URL)) %>%
arrange(desc(count)) %>%
slice(1:1000)
# Articles by activity
articles <-  dta %>%
filter(SOURCE_TYPE == "web") %>%
group_by(TITLE) %>%
summarise(count = n(),across(URL)) %>%
arrange(desc(count)) %>%
slice(1:1000)
datatable(articles, options = list(scrollX = TRUE, scrollY = "500px"))
# Articles by reach
dta  %>%
filter(SOURCE_TYPE == "web") %>%
ungroup %>%
arrange(desc(REACH)) %>%
slice(1:3000) %>%
group_by(V1) %>%
summarise(REACH = sum(REACH),across(c(TITLE, AUTHOR, FROM, URL))) %>%
ungroup() %>%
select(-V1, TITLE, AUTHOR, FROM, URL, REACH) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
# Articles by likes
dta  %>%
filter(SOURCE_TYPE == "web") %>%
ungroup %>%
arrange(desc(LIKE_COUNT)) %>%
slice(1:3000) %>%
group_by(V1) %>%
summarise(LIKE = sum(LIKE_COUNT),across(c(TITLE, AUTHOR, FROM, URL))) %>%
ungroup() %>%
select(-V1, TITLE, AUTHOR, FROM, URL, LIKE) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
# Articles by comments
dta  %>%
filter(SOURCE_TYPE == "web") %>%
ungroup %>%
arrange(desc(COMMENT_COUNT)) %>%
slice(1:3000) %>%
group_by(V1) %>%
summarise(COMMENT = sum(COMMENT_COUNT),across(c(TITLE, AUTHOR, FROM, URL))) %>%
ungroup() %>%
select(-V1, TITLE, AUTHOR, FROM, URL, COMMENT) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
# Arcicles by shares
dta  %>%
filter(SOURCE_TYPE == "web") %>%
ungroup %>%
arrange(desc(SHARE_COUNT)) %>%
slice(1:3000) %>%
group_by(V1) %>%
summarise(SHARE = sum(SHARE_COUNT),across(c(TITLE, AUTHOR, FROM, URL))) %>%
ungroup() %>%
select(-V1, TITLE, AUTHOR, FROM, URL, SHARE) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8")  %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "NEG")
CroSentilex_p  <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8") %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "POZ")
Crosentilex_sve <- rbind(setDT(CroSentilex_n), setDT(CroSentilex_p))
# check lexicon data
#head(sample_n(Crosentilex_sve,1000),15)
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE) %>%
rename(word = "V1", sentiment = "V2" )
Encoding(CroSentilex_Gold$word) <- "UTF-8"
CroSentilex_Gold[1,1] <- "dati"
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
# check lexicon data
#head(sample_n(CroSentilex_Gold,100),15)
# create stop words
stopwords_cro <- get_stopwords(language = "hr", source = "stopwords-iso")
# check stopwords data
#head(sample_n(stopwords_cro,100),15)
# extend stop words
my_stop_words <- tibble(
word = c(
"jedan","mjera", "može", "možete", "mogu", "kad", "sada", "treba", "ima", "osoba",
"e","prvi", "dva","dvije","drugi",
"tri","treći","pet","kod",
"ove","ova",  "ovo","bez", "kod",
"evo","oko",  "om", "ek",
"mil","tko","šest", "sedam",
"osam",   "čim", "zbog",
"prema", "dok","zato", "koji",
"im", "čak","među", "tek",
"koliko", "tko","kod","poput",
"baš", "dakle", "osim", "svih",
"svoju", "odnosno", "gdje",
"kojoj", "ovi", "toga",
"ubera", "vozača", "hrvatskoj", "usluge", "godine", "više", "taksi", "taxi", "taksija", "taksija", "kaže", "rekao", "19"," aee", "ae","bit.ly", "https", "one", "the"
),
lexicon = "lux"
)
stop_corpus <- my_stop_words %>%
bind_rows(stopwords_cro)
# check stopwords data
#head(sample_n(stop_corpus,100),15)
# dim before tokenize
dim(dta)
# tokenize
dta %>%
unnest_tokens(word, FULL_TEXT) -> fb_token
# dim after tokenize
dim(fb_token)
# check
# fb_token %>%
#   select(FROM, word, MENTION_SNIPPET ) %>%
#     sample_n(.,100)
# remove stop words, numbers, single letters
fb_token %>%
anti_join(stop_corpus, by = "word") %>%
mutate(word = gsub("\\d+", NA, word)) %>%
mutate(word = gsub("^[a-zA-Z]$", NA, word)) -> fb_tokenTidy
# remove NA
fb_tokenTidy %>%
filter(!is.na(word)) -> fb_tokenTidy
# check
# fb_tokenTidy  %>%
#   select(FROM, word, MENTION_SNIPPET ) %>%
#   sample_n(.,100)
# dim after clean
dim(fb_tokenTidy)
# dim before tokenize
dim(dta)
# tokenize
dta %>%
filter(SOURCE_TYPE == "web") %>%
unnest_tokens(word, FULL_TEXT) -> fb_token
# dim after tokenize
dim(fb_token)
# check
# fb_token %>%
#   select(FROM, word, MENTION_SNIPPET ) %>%
#     sample_n(.,100)
# remove stop words, numbers, single letters
fb_token %>%
anti_join(stop_corpus, by = "word") %>%
mutate(word = gsub("\\d+", NA, word)) %>%
mutate(word = gsub("^[a-zA-Z]$", NA, word)) -> fb_tokenTidy
# remove NA
fb_tokenTidy %>%
filter(!is.na(word)) -> fb_tokenTidy
# check
# fb_tokenTidy  %>%
#   select(FROM, word, MENTION_SNIPPET ) %>%
#   sample_n(.,100)
# dim after clean
dim(fb_tokenTidy)
## Most common words
fb_tokenTidy[,.N,by = word][order(-N),]
## Vizualize most common words
fb_tokenTidy[,.N,by = word][N>10000][order(-N),][,word := reorder(word,N)] %>%
ggplot(aes(word, N)) +
geom_col() +
xlab(NULL) +
coord_flip() +
theme_economist()
## Vizualize most common words over time
fb_tokenTidy[,DAY:=floor_date(DATE,"day")][,N:=.N,by=DAY][,gn:=sum(N)][
word %in% c("ukrajini", "pomoć", "humanitarnu", "udruga", "prava"),] %>%
ggplot(., aes(DAY,  N / gn)) +
geom_point() +
ggtitle("Učestalost korištenja riječi") +
ylab("% ukupnih riječi") +
geom_smooth() +
facet_wrap(~ word, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format())+
theme_economist()
## Most common words
fb_tokenTidy[,.N,by = word][order(-N),] %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
## Vizualize most common words
fb_tokenTidy[,.N,by = word][N>10000][order(-N),][,word := reorder(word,N)] %>%
ggplot(aes(word, N)) +
geom_col() +
xlab(NULL) +
coord_flip() +
theme_economist()
## Vizualize most common words
fb_tokenTidy[,.N,by = word][N>10000][order(-N),][,word := reorder(word,N)] %>%
ggplot(aes(word, N)) +
geom_col() +
xlab(NULL) +
coord_flip() +
theme_economist()
## Vizualize most common words over time
fb_tokenTidy[,DAY:=floor_date(DATE,"day")][,N:=.N,by=DAY][,gn:=sum(N)][
word %in% c("ukrajini", "pomoć", "humanitarnu", "udruga", "prava"),] %>%
ggplot(., aes(DAY,  N / gn)) +
geom_point() +
ggtitle("Učestalost korištenja riječi") +
ylab("% ukupnih riječi") +
geom_smooth() +
facet_wrap(~ word, scales = "free_y") +
scale_y_continuous(labels = scales::percent_format())+
theme_economist()
fb_bigram <- fb_TopLike %>%
unnest_tokens(bigram, FULL_TEXT, token = "ngrams", n = 2)
# Select postes with +5k likes
dta[order(-LIKE_COUNT)][LIKE_COUNT >= 500] -> fb_TopLike
# check
dim(fb_TopLike)
# influencer activity
fb_TopLike[,.N,FROM][order(-N)]
# influencer by like
fb_TopLike[,.(FROM, LIKE_COUNT)][,LIKES := sum(LIKE_COUNT),FROM][,.(FROM,LIKES)][order(-LIKES)] %>% unique()
# tokenize
fb_TopLike %>%
unnest_tokens(word, FULL_TEXT) -> fb_token_TopLike
# dim after tokenize
dim(fb_token_TopLike)
# remove stop words, numbers, single letters
fb_token_TopLike %>%
anti_join(stop_corpus, by = "word") %>%
mutate(word = gsub("\\d+", NA, word)) %>%
mutate(word = gsub("^[a-zA-Z]$", NA, word)) -> fb_tokenTidy_TopLike
# remove NA
fb_tokenTidy_TopLike %>%
filter(!is.na(word)) -> fb_tokenTidy_TopLike
## most common words
fb_tokenTidy_TopLike[,.N,by = word][order(-N),]
## word cloud
fb_tokenTidy_TopLike %>%
anti_join(CroSentilex_Gold,by="word") %>%
count(word) %>%
arrange(desc(n)) %>%
top_n(100) %>%
with(wordcloud(word, n, max.words = 120))
## Udio riječi po domenama
domenaWords <- fb_tokenTidy_TopLike %>%
filter(FROM %in% c("24sata", "jutarnji.hr", "slobodnadalmacija.hr", "Index.hr" )) %>%
count(FROM, word, sort = T)
ukupnoWords <- domenaWords %>%
group_by(FROM) %>%
summarise(totWords = sum(n))
domenaWords <- left_join(domenaWords, ukupnoWords)
# domenaWords %>% head(15)
# domenaWords %>%
# ggplot(., aes(n/totWords, fill = domena)) +
#   geom_histogram(show.legend = FALSE) +
#   xlim(NA, 0.0009) +
#   facet_wrap(~domena, ncol = 2, scales = "free_y")
## Najbitnije riječi po domenma
idf <- domenaWords %>%
bind_tf_idf(word, FROM, n)
#idf %>% head(10)
# idf %>%
#   select(-totWords) %>%
#   arrange(desc(tf_idf))
idf %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
mutate(FROM = factor(FROM)) %>%
group_by(FROM) %>%
top_n(11) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = FROM)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~FROM, ncol = 2, scales = "free") +
coord_flip() +
theme_economist()
fb_bigram <- fb_TopLike %>%
unnest_tokens(bigram, FULL_TEXT, token = "ngrams", n = 2)
#fb_bigram %>% head(10)
# fb_bigram %>%
#   count(bigram, sort = T) %>%
#   head(25)
fb_bigram_sep <- fb_bigram %>%
separate(bigram, c("word1","word2"), sep = " ")
fb_bigram_tidy <- fb_bigram_sep %>%
filter(!word1 %in% stop_corpus$word) %>%
filter(!word2 %in% stop_corpus$word) %>%
mutate(word1 = gsub("\\d+", NA, word1)) %>%
mutate(word2 = gsub("\\d+", NA, word2)) %>%
mutate(word1 = gsub("^[a-zA-Z]$", NA, word1)) %>%
mutate(word2 = gsub("^[a-zA-Z]$", NA, word2))
fb_bigram_tidy_bigram_counts <- fb_bigram_tidy %>%
count(word1, word2, sort = TRUE)
bigrams_united <- fb_bigram_tidy %>%
unite(bigram, word1, word2, sep = " ") %>%
filter(., !grepl("NA",bigram))
#bigrams_united
bigrams_united %>%
count(FROM,bigram,sort = T) -> topicBigram
bigrams_united %>%
count(bigram, sort = T) %>%
head(45)
# Najvažniji bigrami po domenama
bigram_tf_idf <- bigrams_united %>%
#  filter (!is.na(bigram)) %>%
count(FROM, bigram) %>%
bind_tf_idf(bigram, FROM, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf %>%
filter(FROM %in% c("24sata", "jutarnji.hr", "slobodnadalmacija.hr", "Index.hr")) %>%
arrange(desc(tf_idf)) %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(FROM) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(bigram, tf_idf, fill = FROM)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~FROM, ncol = 2, scales = "free") +
coord_flip() +
theme_economist()
