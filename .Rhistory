<<<<<<< HEAD
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(tolower(x), words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
dt
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
pattern_imena <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble() %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(imena, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
imena <- bind_rows(results)
filtered_imena <- imena %>%
filter(str_detect(full_text, pattern_imena))
View(imena)
View(dt)
dt <- read_excel("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/generalno.xlsx")
View(dt)
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
pattern_imena <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble() %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(imena, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
imena <- bind_rows(results)
filtered_imena <- imena %>%
filter(str_detect(full_text, pattern_imena))
View(filtered_imena)
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
fraze_root <- sapply(fraze, write_tokens)
fraze_root <- sapply(strsplit(fraze_root, "\t"), `[`, 2)
fraze <- enframe(fraze_root, name = "name", value = "root")
pattern_fraze <- str_c("\\b(", str_c(fraze$root, collapse = "|"), ")\\b")
pattern_fraze <- str_c("\\b(", str_c(fraze, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble() %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(fraze, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
fraze <- bind_rows(results)
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
words_vector <- str_c("\\b(", str_c(fraze, collapse = "|"), ")\\b")
# Assuming all is a data.table
setDT(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
check_matches <- function(text, words_vector) {
# Create a pattern with a word boundary only before the word
patterns <- paste0("\\b", words_vector)
any(stri_detect_regex(text, patterns))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
fraze <- dt[has_match==T,]
View(fraze)
pravno <- c("vatikanski", "ugovori", "plaćanje", "blagoslova","sakramenata", "nekretnine", "imovina")
pattern_pravno <- str_c("\\b(", str_c(pravno, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble()  %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(pattern_pravno, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
pravno <- bind_rows(results)
View(pravno)
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
words_vector
# Assuming all is a data.table
setDT(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
dt
dt[, FULL_TEXT := tolower(FULL_TEXT)]
View(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
words_vector
# Assuming all is a data.table
setDT(dt)
dt[, FULL_TEXT := tolower(FULL_TEXT)]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_regex(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(unlist(str_extract_all(x, words_vector)), collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
# Loop through each batch
for (i in 1:num_batches) {
# ... existing code ...
# Correct calculation of matched_words
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(unlist(str_extract_all(x, words_vector)), collapse=", "))
)]
# ... existing code ...
}
imena <- dt[has_match==TRUE,]
imena <- dt[has_match==T,]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_regex(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(unlist(str_extract_all(x, words_vector)), collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
View(imena)
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
pattern_imena <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Define the batch size
batch_size <- 1000
# Split your data into batches
batches <- split(dt, ceiling(seq_along(dt[[1]])/batch_size))
# Function to process each batch
process_batch <- function(batch) {
batch %>%
as_tibble() %>%
mutate(
full_text = tolower(FULL_TEXT),
match = str_c(imena, collapse = '|'),
key_word = str_extract_all(full_text, match)
) %>%
filter(lengths(key_word) > 0) %>%
unnest(key_word) %>%
distinct(V1, .keep_all = TRUE)
}
# Process each batch
results <- batches %>%
map(~ process_batch(.x))
imena <- bind_rows(results)
mena <- c("Stepinac","Damir", "Stojić", "Željka" ,"Markić", "Ike", "Mandurić","Vlado", "Košić","Robert" ,"Bajruši", "Inoslav", "Bešker", "Ante" ,"Tomić", "Branimir" ,"Pofuk", "Igor", "Lasić", "Hrvoje", "Marjanović","Bozanić", "Ksenija" ,"Abramović", "Drago","Pilsel") %>% tolower()
imena_root <- sapply(imena, write_tokens)
imena <- c("Stepinac","Damir", "Stojić", "Željka" ,"Markić", "Ike", "Mandurić","Vlado", "Košić","Robert" ,"Bajruši", "Inoslav", "Bešker", "Ante" ,"Tomić", "Branimir" ,"Pofuk", "Igor", "Lasić", "Hrvoje", "Marjanović","Bozanić", "Ksenija" ,"Abramović", "Drago","Pilsel") %>% tolower()
imena_root <- sapply(imena, write_tokens)
imena_root <- sapply(strsplit(imena_root, "\t"), `[`, 2)
imena <- enframe(imena_root, name = "name", value = "root")
imena
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
words_vector
words_vector <- str_c("\\b(", str_c(imena$root, collapse = "|"), ")\\b")
words_vector
dt[, FULL_TEXT := tolower(FULL_TEXT)]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_regex(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(unlist(str_extract_all(x, words_vector)), collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
View(imena)
generalno <- c("crkva", "biskup", "Kaptol", "časna sestra", "svećenik", "župnik", "vjernik", "kardinal", "papa", "sveti otac", "redovnik", "redovnica","kršćanstvo", "vjera", "Gospa", "Isus", "katolički", "misa", "pričest", "krizma", "grijeh", "vjeroučitelj", "vjeronauk", "blagoslov","svjedočanstvo", "relikvija", "stigma", "duhovnost", "velečasni","zaređenje", "krunica", "vjeronauk", "ukazanje") %>% tolower()
generalno
a
genralno_root <- sapply(generalno, write_tokens)
genralno_root
genralno_root <- sapply(strsplit(genralno_root, "\t"), `[`, 2)
genralno_root
generalno <- enframe(genralno_root, name = "name", value = "root")
generalno
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(writexl)
library(data.table)
library(stringi)
dt <- read_excel("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/generalno.xlsx")
library(DBI) ## učitano
con <- dbConnect(RSQLite::SQLite(), path = ":memory:")
library(RSQLite)
install.packages("RSQLite")
library(RSQLite)
library(DBI) ## učitano
con <- dbConnect(RSQLite::SQLite(), path = ":memory:")
copy_to(
dest = con,
df = nycflights13::flights,
name = "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
library(dplyr)
copy_to(
dest = con,
df = nycflights13::flights,
name = "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
=======
labels = c("Positive", "Neutral", "Negative")) +  # Assuming two sentiment values; adjust as needed
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black"),
strip.background = element_blank(),
strip.text.y = element_text(color = "black")
) +
coord_flip()
ggplot(gg1, aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
facet_wrap(~ INDUSTRIJA, scales = "free_y") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentimenti po Industrijama"
) +
theme_minimal() +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +  # Assuming two sentiment values; adjust as needed
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black"),
strip.background = element_blank(),
strip.text.y = element_text(color = "black")
) +
coord_flip()
gg1 %>% filter(INDUSTRIJA == "Zdravlje") %>%
ggplot(., aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentiment u industriji Zdravlja"
)  +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
>>>>>>> 2d9d50db1fe459021a62f3077fca0beccc308fae
)
SENTIMENT <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percentSENTIMENT = round(N / sum(N) * 100,2))
sentiment <- data.frame(
number = c(1, 2, 3),
text = c("Pozitivan", "Neutralan", "Negativan")
)
ggplot(data = dta, aes(x = SENTIMENT)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
ggtitle("Sentiment") +
xlab("Sentiment") +
ylab("Frequency")
table_data <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("SENTIMENT" = "number"))
table_data <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(sentiment, by = c("SENTIMENT" = "number"))
table_output <- table_data %>%
select(text, N, percent) %>%
kable(format = "pandoc",
col.names = c("Poveznica", "Broj objava", "%"),
caption = "Pregled poveznica") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
table_output
ggplot(data = dta, aes(x = factor(SENTIMENT), fill = factor(SENTIMENT))) +
geom_bar() +
labs(
x = "Sentiment",
y = "Frequency",
title = "Sentiment u industriji Zdravlja"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
ggplot(data = dta, aes(x = factor(SENTIMENT), fill = factor(SENTIMENT))) +
geom_bar() +
labs(
x = "Sentiment",
y = "Broj objava",
title = "Sentiment u industriji Zdravlja"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
<<<<<<< HEAD
dbListTables(bq_con)
dbListTables(q_con)
natality <- tbl(bq_con, "natality")
natality <- tbl(q_con, "natality")
dbListTables(q_con)
View(natality)
bw <-
natality %>%
filter(!is.na(state)) %>% ## makni outlier-e
group_by(year) %>%
summarise(weight_pounds = mean(weight_pounds, na.rm=T)) %>%
collect()
View(bw)
=======
stemmed %>%
filter(INDUSTRIJA == 6) %>%
inner_join(CroSentilex_Gold,by="word") %>%
count(word, sentiment) %>%
top_n(200) %>%
mutate(sentiment = case_when(sentiment == 0 ~ "+/-",
sentiment == 1 ~ "-",
sentiment == 2 ~ "+")) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("firebrick3", "deepskyblue3","darkslategray"),
max.words = 120)
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 6),30)
## Sentiment
doprinos_sentimentu <- function(dataset, no = n) {
dataset %>%
inner_join(NRCpn, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Broj riječi") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("grey40", "grey50")) +  # Assuming two sentiment values; adjust as needed
theme_minimal() +
theme(
panel.background = element_blank(),
strip.background = element_blank(),
panel.grid = element_blank()
) -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 6),15)
NRCpn <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Positive","Negative")) %>%
mutate(Emotion = recode(Emotion,
"Positive" = "Pozitivno",
"Negative" = "Negativno"))
## Sentiment
doprinos_sentimentu <- function(dataset, no = n) {
dataset %>%
inner_join(NRCpn, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Broj riječi") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("grey40", "grey50")) +  # Assuming two sentiment values; adjust as needed
theme_minimal() +
theme(
panel.background = element_blank(),
strip.background = element_blank(),
panel.grid = element_blank()
) -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger","Anticipation","Disgust","Fear","Joy","Sadness","Surprise","Trust")) %>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
"Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
"Joy" = "Zadovoljstvo",
"Sadness" = "Tuga",
"Surprise" = "Iznenađenje",
"Trust" = "Povjerenje"))
## Sentiment
doprinos_sentimentu_full <- function(dataset, no = n) {
dataset %>%
inner_join(NRC, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion,) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Broj riječi") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("grey10", "grey20","grey30","grey40","grey50","grey60","grey70","grey80")) +  # Assuming two sentiment values; adjust as needed
theme_minimal() +
theme(
panel.background = element_blank(),
strip.background = element_blank(),
panel.grid = element_blank()
) -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu(stemmed %>%
filter(INDUSTRIJA == 6),15)
doprinos_sentimentu_full(stemmed %>%
filter(INDUSTRIJA == 6),15)
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness",
#"Surprise",
#"Trust")) %>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#  "Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
# "Joy" = "Zadovoljstvo",
"Sadness" = "Tuga",
# "Surprise" = "Iznenađenje",
# "Trust" = "Povjerenje"))
))))
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness",
#"Surprise",
#"Trust")) %>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#  "Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
# "Joy" = "Zadovoljstvo",
"Sadness" = "Tuga",
# "Surprise" = "Iznenađenje",
# "Trust" = "Povjerenje"))
))))
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness",
#"Surprise",
#"Trust"))
)%>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#  "Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
# "Joy" = "Zadovoljstvo",
"Sadness" = "Tuga",
# "Surprise" = "Iznenađenje",
# "Trust" = "Povjerenje"))
)))
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness"
#"Surprise",
#"Trust"))
)%>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#  "Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
# "Joy" = "Zadovoljstvo",
"Sadness" = "Tuga"
# "Surprise" = "Iznenađenje",
# "Trust" = "Povjerenje"))
)))
NRC <- LilaHR_long %>% rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness"
#"Surprise",
#"Trust"))
)%>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#  "Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
# "Joy" = "Zadovoljstvo",
"Sadness" = "Tuga"
# "Surprise" = "Iznenađenje",
# "Trust" = "Povjerenje"))
)))
NRC <- LilaHR_long %>%
rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness"
#"Surprise",
#"Trust"
)) %>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#"Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
#"Joy" = "Zadovoljstvo",
"Sadness" = "Tuga"
#"Surprise" = "Iznenađenje",
#"Trust" = "Povjerenje"
))
## Sentiment
doprinos_sentimentu_full_some_emotion <- function(dataset, no = n) {
dataset %>%
inner_join(NRC, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion,) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Broj riječi") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("grey10", "grey20","grey30","grey40","grey50","grey60","grey70","grey80")) +  # Assuming two sentiment values; adjust as needed
theme_minimal() +
theme(
panel.background = element_blank(),
strip.background = element_blank(),
panel.grid = element_blank()
) -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu_full(stemmed,20)
NRC_some <- LilaHR_long %>%
rename("word" = "korijen") %>%
filter(Emotion %in% c("Anger",
#"Anticipation",
"Disgust",
"Fear",
#"Joy",
"Sadness"
#"Surprise",
#"Trust"
)) %>%
mutate(Emotion = recode(Emotion,
"Anger" = "Ljutnja",
#"Anticipation" = "Iščekivanje",
"Disgust" = "Gađenje",
"Fear" = "Strah",
#"Joy" = "Zadovoljstvo",
"Sadness" = "Tuga"
#"Surprise" = "Iznenađenje",
#"Trust" = "Povjerenje"
))
## Sentiment
doprinos_sentimentu_full_some_emotion <- function(dataset, no = n) {
dataset %>%
inner_join(NRC_some, by = "word") %>%
count(word, Emotion,sort = TRUE) %>%
group_by(Emotion,) %>%
top_n(no) %>%
ungroup() %>%
#  mutate(sentiment = case_when(sentiment == 0 ~ "NEUTRAL",
#                                 sentiment == 1 ~ "NEGATIVE",
#                                 sentiment == 2 ~ "POSITIVE")) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = Emotion)) +
geom_col(show.legend = FALSE) +
ggtitle( "Sentiment") +
labs( x = "Riječ", y = "Broj riječi") +
facet_wrap(~ Emotion, scales = "free_y") +
coord_flip() +
scale_fill_manual(values = c("grey10", "grey20","grey30","grey40","grey50","grey60","grey70","grey80")) +  # Assuming two sentiment values; adjust as needed
theme_minimal() +
theme(
panel.background = element_blank(),
strip.background = element_blank(),
panel.grid = element_blank()
) -> gg_doprinos_sentimentu
gg_doprinos_sentimentu
}
doprinos_sentimentu_full(stemmed,20)
doprinos_sentimentu_full_some_emotion(stemmed,20)
rm(list = ls())
>>>>>>> 2d9d50db1fe459021a62f3077fca0beccc308fae
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
<<<<<<< HEAD
=======
library(tidyverse)
library(readxl)
library(xlsx)
install.packages("xlsx")
library(xlsx)
>>>>>>> 2d9d50db1fe459021a62f3077fca0beccc308fae
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
<<<<<<< HEAD
=======
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
>>>>>>> 2d9d50db1fe459021a62f3077fca0beccc308fae
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
variables <- read.xlsx("C:/Users/Lukas/OneDrive/Desktop/Native.xlsx", sheetIndex = 1)
# Read In
original <- read.xlsx("C:/Users/lukas/Desktop/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
stemmed <- readRDS("C:/Users/lukas/Desktop/native_token_stemm.rds")
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/lukas/Desktop/Mislav@Luka/crosentilex-negatives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8")  %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "NEG")
library(stopwords)
install.packages("stopwords")
library(stopwords)
# Read In
original <- read.xlsx("D:/LUKA/Freelance/Mediatoolkit/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
<<<<<<< HEAD
variables <- read.xlsx("D:/LUKA/Academic/Native rad/Native.xlsx", sheetIndex = 1)
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
stemmed <- readRDS("D:/LUKA/Freelance/Mediatoolkit/native_token_stemm.rds")
stemmed <- stemmed %>%
rename("wordp" = "word") %>%
rename("word" = "transformed_column")
=======
>>>>>>> 2d9d50db1fe459021a62f3077fca0beccc308fae
