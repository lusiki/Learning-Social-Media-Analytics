library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(writexl)
library(data.table)
library(stringi)
dt <- read_excel("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/generalno.xlsx")
View(dt)
setDT(dt)
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", ")),
#  matched_sentences = sapply(FULL_TEXT, extract_sentences, words_vector)
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
check_matches <- function(text, pattern) {
any(stri_detect_fixed(text, pattern, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", ")),
#  matched_sentences = sapply(FULL_TEXT, extract_sentences, words_vector)
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
View(dt)
words_vector
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", ")),
matched_sentences = sapply(FULL_TEXT, extract_sentences, words_vector)
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", ")),
#  matched_sentences = sapply(FULL_TEXT, extract_sentences, words_vector)
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Assuming all is a data.table
setDT(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
all[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- all[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
dt <- dt[,-c(28:29)]
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Assuming all is a data.table
setDT(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
c
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(all))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
imena <- c("Stepinac","Stojić","Markić", "Mandurić", "Košić" ,"Bajruši", "Bešker","Tomić","Pofuk",  "Lasić", "Marjanović","Bozanić", "Abramović", "Pilsel") %>% tolower()
words_vector <- str_c("\\b(", str_c(imena, collapse = "|"), ")\\b")
# Assuming all is a data.table
setDT(dt)
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
words_vector
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
words_vector <- str_c("\\b(", str_c(fraze, collapse = "|"), ")\\b")
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", ")),
#  matched_sentences = sapply(FULL_TEXT, extract_sentences, words_vector)
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
words_vector <- str_c("\\b(", str_c(fraze, collapse = "|"), ")\\b")
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
fraze <- dt[has_match==T,]
words_vector
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
words_vector <- str_c("\\b(", str_c(fraze, collapse = "|"), ")\\b")
check_matches <- function(text, words_vector) {
# Create a pattern with a word boundary only before the word
patterns <- paste0("\\b", words_vector)
any(stri_detect_regex(text, patterns))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
fraze <- dt[has_match==T,]
View(fraze)
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
fraze <- c("pedofilija", "klečavci", "kaptolaši", "popovi", "lopovi", "zatucani" , "fanatici", "fašisti", "katolibani","crkvenjak", "ekstremni")
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
fraze <- dt[has_match==T,]
pravno <- c("vatikanski", "ugovori", "plaćanje", "blagoslova","sakramenata", "nekretnine", "imovina")
words_vector <- str_c("\\b(", str_c(pravno, collapse = "|"), ")\\b")
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
pravno <- dt[has_match==T,]
check_matches <- function(text, words_vector) {
# Create a pattern with a word boundary only before the word
patterns <- paste0("\\b", words_vector)
any(stri_detect_regex(text, patterns))
}
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
pravno <- dt[has_match==T,]
View(pravno)
View(pravno)
