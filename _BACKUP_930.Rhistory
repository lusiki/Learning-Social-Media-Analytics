<<<<<<< HEAD
original <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
=======
words_vector <- str_c("\\b(", str_c(imena$root, collapse = "|"), ")\\b")
words_vector
dt[, FULL_TEXT := tolower(FULL_TEXT)]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_fixed(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(words_vector[stri_detect_fixed(x, words_vector)], collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
# Vectorized function to check for matches
check_matches <- function(text, words_vector) {
any(stri_detect_regex(text, words_vector, negate = FALSE))
}
batch_size <- 1000
# Calculate the number of batches
num_batches <- ceiling(nrow(dt) / batch_size)
# Loop through each batch
for (i in 1:num_batches) {
start_time <- Sys.time()
# Calculate the start and end row indices for the current batch
start_idx <- (i - 1) * batch_size + 1
end_idx <- min(i * batch_size, nrow(dt))
# Print the current batch number and row indices
cat(sprintf("Processing batch %d (rows %d to %d)...\n", i, start_idx, end_idx))
# Subset the data table for the current batch and apply the operations
dt[start_idx:end_idx, `:=` (
has_match = sapply(FULL_TEXT, check_matches, words_vector),
matched_words = sapply(FULL_TEXT, function(x) paste(unlist(str_extract_all(x, words_vector)), collapse=", "))
)]
batch_data <- dt[start_idx:end_idx]
end_time <- Sys.time()
duration <- end_time - start_time
# Print the duration for the current batch
cat(sprintf("Batch %d processed in %f seconds.\n", i, duration))
# ... [rest of your loop code for saving etc.] ...
}
imena <- dt[has_match==T,]
View(imena)
generalno <- c("crkva", "biskup", "Kaptol", "časna sestra", "svećenik", "župnik", "vjernik", "kardinal", "papa", "sveti otac", "redovnik", "redovnica","kršćanstvo", "vjera", "Gospa", "Isus", "katolički", "misa", "pričest", "krizma", "grijeh", "vjeroučitelj", "vjeronauk", "blagoslov","svjedočanstvo", "relikvija", "stigma", "duhovnost", "velečasni","zaređenje", "krunica", "vjeronauk", "ukazanje") %>% tolower()
generalno
a
genralno_root <- sapply(generalno, write_tokens)
genralno_root
genralno_root <- sapply(strsplit(genralno_root, "\t"), `[`, 2)
genralno_root
generalno <- enframe(genralno_root, name = "name", value = "root")
generalno
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(writexl)
library(data.table)
library(stringi)
dt <- read_excel("D:/LUKA/Academic/HKS/Projekti/Dezinformacije/Data/generalno.xlsx")
library(DBI) ## učitano
con <- dbConnect(RSQLite::SQLite(), path = ":memory:")
library(RSQLite)
install.packages("RSQLite")
library(RSQLite)
library(DBI) ## učitano
con <- dbConnect(RSQLite::SQLite(), path = ":memory:")
copy_to(
dest = con,
df = nycflights13::flights,
name = "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
library(dplyr)
copy_to(
dest = con,
df = nycflights13::flights,
name = "flights",
temporary = FALSE,
indexes = list(
c("year", "month", "day"),
"carrier",
"tailnum",
"dest"
)
)
flights_db <- tbl(con, "flights")
flights_db
dbGetQuery(con, "SELECT * FROM flights WHERE dep_delay > 240.0 LIMIT 5")
q_con <-
dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing_id
)
billing_id <- Sys.getenv("GCE_DEFAULT_PROJECT_ID") ## zamijenite sa vašim ID
q_con <-
dbConnect(
bigrquery::bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing_id
)
dbListTables(bq_con)
dbListTables(q_con)
natality <- tbl(bq_con, "natality")
natality <- tbl(q_con, "natality")
dbListTables(q_con)
View(natality)
bw <-
natality %>%
filter(!is.na(state)) %>% ## makni outlier-e
group_by(year) %>%
summarise(weight_pounds = mean(weight_pounds, na.rm=T)) %>%
collect()
View(bw)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
# Read In
original <- read.xlsx("D:/LUKA/Freelance/Mediatoolkit/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- read.xlsx("D:/LUKA/Academic/Native rad/Native.xlsx", sheetIndex = 1)
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
stemmed <- readRDS("D:/LUKA/Freelance/Mediatoolkit/native_token_stemm.rds")
stemmed <- stemmed %>%
rename("wordp" = "word") %>%
rename("word" = "transformed_column")
knitr::opts_chunk$set(echo = TRUE)
>>>>>>> 0e746d60b77243cb41bd3b12ea7f4d02cb4fa0f0
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
library(stopwords)
<<<<<<< HEAD
original <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
stemmed <- readRDS("C:/Users/lukas/Desktop/native_token_stemm.rds")
stemmed <- readRDS("C:/Users/lukas/Dropbox/Članci/Native rad/native_token_stemm.rds")
poveznice <- data.frame(
number = c(1, 2, 3, 4, 5, 6),
text = c(
"Društvene mreže brenda",
"Službena internetska stranica brenda",
"Poveznica nevezana za brend",
"Članak ne sadrži poveznice na kanale brenda / oglašivača",
"Suradnja oglašivača i drugog brenda",
"Više kombinacija"
)
)
# Read In
=======
# Read In
original <- read.xlsx("D:/LUKA/Freelance/Mediatoolkit/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- read.xlsx("D:/LUKA/Academic/Native rad/Native.xlsx", sheetIndex = 1)
original <- read.xlsx("C:/Users/lukas/Desktop/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
stemmed <- readRDS("C:/Users/lukas/Desktop/native_token_stemm.rds")
stemmed <- readRDS("C:/Users/Lukas/Dropbox/Mediatoolikit/native_token_stemm.rds")
stemmed <- readRDS("C:/Users/Lukas/Dropbox/Mediatoolkit/native_token_stemm.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
library(stopwords)
# fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# fullDtaTxt <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_TXT.csv")
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
dt <- dt %>% filter(SOURCE_TYPE == "web")
n_distinct(dt$FROM)
result <- dt[, .(Count = .N), by = .(FROM)][, Percentage := (Count / sum(Count)) * 100]
View(result)
result %>% arrange(Count)
result %>% arrange(Count) %>% View()
result %>% arrange(desc(Count)) %>% View()
result %>% filter(str_detect(FROM,"bitno")
)
result %>% filter(str_detect(FROM,"fino") )
result %>% filter(str_detect(FROM,"net") )
result %>% filter(str_detect(FROM,"net") ) %>% View()
result %>% filter(str_detect(FROM,"bit") ) %>% View()
result %>% filter(str_detect(FROM,"bitno") ) %>% View()
knitr::opts_chunk$set(echo = TRUE)
# fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# fullDtaTxt <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_TXT.csv")
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
dt %>% filter(str_detect(FROM,"bitno") )
dt %>% filter(str_detect(FROM,"bitno") ) %>% View()
dt %>% filter(str_detect(URL,"bitno") ) %>% View()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
library(stopwords)
# fullDta <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_NOTXT.csv")
# fullDtaTxt <- fread("D:/LUKA/Freelance/Mediatoolkit/FULLDATA_TXT.csv")
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
View(dt)
>>>>>>> 0e746d60b77243cb41bd3b12ea7f4d02cb4fa0f0
original <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/Native.xlsx", sheetIndex = 1)
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
<<<<<<< HEAD
=======
stemmed <- readRDS("C:/Users/Lukas/Dropbox/Mediatoolkit/native_token_stemm.rds")
>>>>>>> 0e746d60b77243cb41bd3b12ea7f4d02cb4fa0f0
stemmed <- readRDS("C:/Users/lukas/Dropbox/Članci/Native rad/native_token_stemm.rds")
stemmed <- stemmed %>%
rename("wordp" = "word") %>%
rename("word" = "transformed_column")
<<<<<<< HEAD
table_data <- dta %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data <- table_data %>%
mutate(
N = replace(N, text == "Članak ne sadrži poveznice na kanale brenda / oglašivača", NA),
percent = replace(percent, text == "Članak ne sadrži poveznice na kanale brenda / oglašivača", NA)
)
table_data
dta
table_data <- dta %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data
View(dta)
dta
dta
View(table_data)
table_data <- table_data %>%
filter(!is.na(N)) %>%
mutate(
N = ifelse(text == "Članak ne sadrži poveznice na kanale brenda / oglašivača", N + sum(is.na(N)), N),
percent = ifelse(text == "Članak ne sadrži poveznice na kanale brenda / oglašivača", percent + sum(is.na(percent)), percent)
)
table_data
table_output <- table_data %>%
select(text, N, percent) %>%
kable(format = "pandoc",
col.names = c("Poveznica", "Broj objava", "%"),
caption = "Pregled poveznica") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
table_output
table_output
table_data <- dta %>%
filter(!is.na()) %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data <- dta %>%
filter(na.omit) %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data <- dta %>%
filter(na.omit()) %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
dta %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N))
table_data <- dta %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data
table_data
table_data <- dta %>%
group_by(POVEZNICE.KANALI) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(poveznice, by = c("POVEZNICE.KANALI" = "number"))
table_data <- na.omit(table_data)
table_output <- table_data %>%
select(text, N, percent) %>%
kable(format = "pandoc",
col.names = c("Poveznica", "Broj objava", "%"),
caption = "Pregled poveznica") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
table_output
table_output
SENTIMENT <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percentSENTIMENT = round(N / sum(N) * 100,2))
sentiment <- data.frame(
number = c(1, 2, 3),
text = c("Pozitivan", "Neutralan", "Negativan")
)
table_data <- dta %>%
group_by(SENTIMENT) %>%
summarise(N = n()) %>%
mutate(percent = round(N / sum(N) * 100, 2)) %>%
arrange(desc(N)) %>%
left_join(sentiment, by = c("SENTIMENT" = "number"))
table_output <- table_data %>%
select(text, N, percent) %>%
kable(format = "pandoc",
col.names = c("Sentiment", "Broj objava", "%"),
caption = "Pregled sentimenta") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
table_output
ggplot(data = dta, aes(x = factor(SENTIMENT), fill = factor(SENTIMENT))) +
geom_bar() +
labs(
x = "Sentiment",
y = "Broj objava",
title = "Pregled sentimenta"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
dta
dta
View(dta)
ggplot(data = dta, aes(x = factor(SENTIMENT), fill = factor(SENTIMENT))) +
geom_bar() +
labs(
x = "Sentiment",
y = "Broj objava",
title = "Pregled sentimenta"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
dta <- dta %>%
filter(!is.na(sentiment))
dta <- dta %>%
filter(!is.na(SENTIMENT))
ggplot(data = dta, aes(x = factor(SENTIMENT), fill = factor(SENTIMENT))) +
geom_bar() +
labs(
x = "Sentiment",
y = "Broj objava",
title = "Pregled sentimenta"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
industry_list <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28),
category = c(
"Financijska industrija",
"Građevinska industrija",
"Moda i ljepota",
"Politička institucija",
"Sportska industrija",
"Zdravlje",
"Obrazovanje i znanost",
"Tehnologija",
"Auto-moto industrija",
"ICT",
"Kultura i umjetnost",
"Turizam, odmor, putovanja, ugostiteljstvo",
"Energetska industrija",
"Prehrambena industrija",
"Industrija bezalkoholnih pića",
"Alkoholna pića",
"Nekretninska industrija",
"Maloprodajna trgovina",
"Igre na sreću",
"Medijske kuće i marketinške, digitalne agencije",
"Namještaj, saloni namještaja, kućanske potrepštine, kućanski uređaji, sredstva za čišćenje",
"Trgovački / shopping centri",
"Glazbena industrija",
"Filmska industrija",
"Brodogradnja",
"Pošta / distribucija pošiljki",
"Komunalne usluge"
)
)
gg1 <- dta %>%
group_by(INDUSTRIJA,SENTIMENT) %>%
summarise(BrojObjava = n()) %>%
left_join(industry_list, by = c("INDUSTRIJA" = "id"))
gg1 <- dta %>%
group_by(INDUSTRIJA,SENTIMENT) %>%
summarise(BrojObjava = n()) %>%
left_join(industry_list, by = c("INDUSTRIJA" = "id"))
gg1$INDUSTRIJA <- gg1$category
gg1 <- gg1 %>% select(-category)
gg1
gg1
ggplot(gg1, aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
facet_wrap(~ INDUSTRIJA, scales = "free_y") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentimenti po Industrijama"
) +
theme_minimal() +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +  # Assuming two sentiment values; adjust as needed
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black"),
strip.background = element_blank(),
strip.text.y = element_text(color = "black")
) +
coord_flip()
gg1 %>% filter(INDUSTRIJA == "Zdravlje") %>%
ggplot(., aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentiment u industriji Zdravlja"
)  +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
industry_list <- data.frame(
id = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28),
category = c(
"Financijska industrija",
"Građevinska industrija",
"Moda i ljepota",
"Politička institucija",
"Sportska industrija",
"Zdravstvena industrija",
"Obrazovanje i znanost",
"Tehnologija",
"Auto-moto industrija",
"ICT",
"Kultura i umjetnost",
"Turizam, odmor, putovanja, ugostiteljstvo",
"Energetska industrija",
"Prehrambena industrija",
"Industrija bezalkoholnih pića",
"Alkoholna pića",
"Nekretninska industrija",
"Maloprodajna trgovina",
"Igre na sreću",
"Medijske kuće i marketinške, digitalne agencije",
"Namještaj, saloni namještaja, kućanske potrepštine, kućanski uređaji, sredstva za čišćenje",
"Trgovački / shopping centri",
"Glazbena industrija",
"Filmska industrija",
"Brodogradnja",
"Pošta / distribucija pošiljki",
"Komunalne usluge"
)
)
gg1 %>% filter(INDUSTRIJA == "Zdravstvena industrija") %>%
ggplot(., aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentiment u industriji Zdravlja"
)  +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
gg1 <- dta %>%
group_by(INDUSTRIJA,SENTIMENT) %>%
summarise(BrojObjava = n()) %>%
left_join(industry_list, by = c("INDUSTRIJA" = "id"))
gg1$INDUSTRIJA <- gg1$category
gg1 <- gg1 %>% select(-category)
ggplot(gg1, aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
facet_wrap(~ INDUSTRIJA, scales = "free_y") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentimenti po Industrijama"
) +
theme_minimal() +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +  # Assuming two sentiment values; adjust as needed
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black"),
strip.background = element_blank(),
strip.text.y = element_text(color = "black")
) +
coord_flip()
gg1 %>% filter(INDUSTRIJA == "Zdravstvena industrija") %>%
ggplot(., aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentiment u industriji Zdravlja"
)  +
#  scale_fill_discrete(name = "Sentiment")+
scale_fill_manual(values = c("grey10", "grey30", "grey50", "grey70"), name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
data_summary <- gg1 %>%
filter(INDUSTRIJA == "ICT") %>%
group_by(SENTIMENT) %>%
summarise(
BrojObjava = sum(BrojObjava),
PercentTotal = (sum(BrojObjava) / sum(gg1$BrojObjava)) * 100
)
# Create the ggplot
ggplot(data_summary, aes(x = factor(SENTIMENT), y = BrojObjava, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste(BrojObjava, "(", round(PercentTotal, 2), "%)")), vjust = -0.5) + # Add labels
labs(
x = "Sentiment",
y = "Broj Objava",
title = "Sentiment u zdravstvenoj industriji"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
# Filter the data for INDUSTRIJA == "ICT"
filtered_data <- gg1 %>%
filter(INDUSTRIJA == "ICT")
# Calculate the number of rows for each SENTIMENT
sentiment_counts <- filtered_data %>%
group_by(SENTIMENT) %>%
summarise(BrojObjava = sum(BrojObjava))
# Calculate the percentage within the ICT category
sentiment_counts <- sentiment_counts %>%
mutate(PercentTotal = (BrojObjava / sum(BrojObjava)) * 100)
# Create the ggplot
ggplot(sentiment_counts, aes(x = factor(SENTIMENT), y = PercentTotal, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(PercentTotal, 2), "%")), vjust = -0.5) + # Add labels
labs(
x = "Sentiment",
y = "Percentage of Total",
title = "Sentiment Distribution within ICT Category"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
# Filter the data for INDUSTRIJA == "ICT"
filtered_data <- gg1 %>%
filter(INDUSTRIJA == "Financijska industrija")
# Calculate the number of rows for each SENTIMENT
sentiment_counts <- filtered_data %>%
group_by(SENTIMENT) %>%
summarise(BrojObjava = sum(BrojObjava))
# Calculate the percentage within the ICT category
sentiment_counts <- sentiment_counts %>%
mutate(PercentTotal = (BrojObjava / sum(BrojObjava)) * 100)
# Create the ggplot
ggplot(sentiment_counts, aes(x = factor(SENTIMENT), y = PercentTotal, fill = factor(SENTIMENT))) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(PercentTotal, 2), "%")), vjust = -0.5) + # Add labels
labs(
x = "Sentiment",
y = "Percentage of Total",
title = "Sentiment Distribution within Financijska industrija Category"
) +
scale_fill_manual(
values = c("grey10", "grey30", "grey50", "grey70"),
name = "Sentiment",
breaks = c("1", "2", "3"),
labels = c("1 = Positive", "2 = Neutral", "3 = Negative")
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
axis.title.x = element_text(color = "black"),
axis.title.y = element_text(color = "black"),
plot.title = element_text(color = "black")
)
=======
View(original)
rm(dt)
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
# descriptives
summ <- daily_counts %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
# create plot of articles over time
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
# Portals by activity
activity <- dta %>%
group_by(FROM) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count))
datatable(activity, options = list(scrollX = TRUE, scrollY = "500px"))
# read in lexicons
CroSentilex_n <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-negatives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8")  %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "NEG")
CroSentilex_p  <- read.delim("C:/Users/Lukas/Dropbox/Mislav@Luka/crosentilex-positives.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE,
fileEncoding = "UTF-8") %>%
rename(word = "V1", sentiment = "V2" ) %>%
mutate(brija = "POZ")
Crosentilex_sve <- rbind(setDT(CroSentilex_n), setDT(CroSentilex_p))
# check lexicon data
#head(sample_n(Crosentilex_sve,1000),15)
CroSentilex_Gold  <- read.delim2("C:/Users/Lukas/Dropbox/Mislav@Luka/gs-sentiment-annotations.txt",
header = FALSE,
sep = " ",
stringsAsFactors = FALSE) %>%
rename(word = "V1", sentiment = "V2" )
Encoding(CroSentilex_Gold$word) <- "UTF-8"
CroSentilex_Gold[1,1] <- "dati"
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "-", "1")
CroSentilex_Gold$sentiment <- str_replace(CroSentilex_Gold$sentiment , "\\+", "2")
CroSentilex_Gold$sentiment <- as.numeric(unlist(CroSentilex_Gold$sentiment))
# check lexicon data
#head(sample_n(CroSentilex_Gold,100),15)
LilaHR  <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean.xlsx", sheet = "Sheet1") %>% select (-"...1")
LilaHR_long <- read_excel("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_clean_long.xlsx", sheet = "Sheet1") %>% select (-"...1")
# Print the long format data
#print(data_long)
#proba <- read.csv2("C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHRcsv.csv", encoding = "UTF-8")
#df <- separate_rows(LilaHR, HR, sep = ", ")
#
# zero_rows_count <- sum(apply(df[-1], 1, function(row) all(row == 0)))
# print(zero_rows_count)
#
# filtered_df <- df %>%
#   filter(!apply(.[,-1], 1, function(row) all(row == 0)))
#
# write.xlsx(filtered_df, "C:/Users/Lukas/Dropbox/Mislav@Luka/lilaHR_.xlsx" )
# create stop words
stopwords_cro <- get_stopwords(language = "hr", source = "stopwords-iso")
# check stopwords data
#head(sample_n(stopwords_cro,100),15)
# extend stop words
my_stop_words <- tibble(
word = c(
"jedan","mjera", "može", "možete", "mogu", "kad", "sada", "treba", "ima", "osoba",
"e","prvi", "dva","dvije","drugi",
"tri","treći","pet","kod",
"ove","ova",  "ovo","bez", "kod",
"evo","oko",  "om", "ek",
"mil","tko","šest", "sedam",
"osam",   "čim", "zbog",
"prema", "dok","zato", "koji",
"im", "čak","među", "tek",
"koliko", "tko","kod","poput",
"baš", "dakle", "osim", "svih",
"svoju", "odnosno", "gdje",
"kojoj", "ovi", "toga",
"ubera", "vozača", "hrvatskoj", "usluge", "godine", "više", "taksi", "taxi", "taksija", "taksija", "kaže", "rekao", "19"," aee", "ae","bit.ly", "https", "one", "the"
),
lexicon = "lux"
)
# full set with diacritics
cro_sw_full_d <- tibble(word = c("a","ako","ali","baš","bez","bi","bih","bila","bili","bilo","bio","bismo","bit","biti","bolje","bude","čak","čega","čemu","često","četiri","čime","čini","će","ćemo","ćete","ću","da","dakle","dalje","dan","dana","dana","danas","dio","do","dobro","dok","dosta","dva","dvije","eto","evo","ga","gdje","god","godina","godine","gotovo","grada","i","iako","ići","ih","ili","im","ima","imaju","imali","imam","imao","imati","inače","ipak","isto","iz","iza","između","ja","jako","je","jedan","jedna","jednog","jednom","jednostavno","jednu","jer","joj","još","ju","ka","kad","kada","kaj","kako","kao","kaže","kod","koja","koje","kojeg","kojeg","kojem","koji","kojih","kojim","kojima","kojoj","kojom","koju","koliko","kraju","kroz","li","malo","manje","me","među","međutim","mene","meni","mi","milijuna","mislim","mjesto","mnogo","mogao","mogli","mogu","moj","mora","možda","može","možemo","možete","mu","na","način","nad","naime","nakon","nam","naravno","nas","ne","neće","nego","neka","neke","neki","nekog","nekoliko","neku","nema","nešto","netko","ni","nije","nikad","nisam","nisu","ništa","niti","no","njih","o","od","odmah","odnosno","oko","on","ona","onda","oni","onih","ono","opet","osim","ova","ovaj","ovdje","ove","ovim","ovo","ovog","ovom","ovu","pa","pak","par","po","pod","poput","posto","postoji","pred","preko","prema","pri","prije","protiv","prvi","puno","put","radi","reći","s","sa","sad","sada","sam","samo","sati","se","sebe","si","smo","ste","stoga","strane","su","svaki","sve","svi","svih","svoj","svoje","svoju","što","ta","tada","taj","tako","također","tamo","te","tek","teško","ti","tih","tijekom","time","tko","to","tog","toga","toj","toliko","tom","tome","treba","tu","u","uopće","upravo","uvijek","uz","vam","vas","već","vi","više","vrijeme","vrlo","za","zapravo","zar","zato","zbog","zna","znači"),
lexicon = "boras")
stop_corpus <- my_stop_words %>%
bind_rows(stopwords_cro)
stop_corpus <- stop_corpus %>%
bind_rows(cro_sw_full_d)
# check stopwords data
#head(sample_n(stop_corpus,100),15)
# tokenize
dta %>%
unnest_tokens(word, FULL_TEXT) -> n_token
View(n_token)
# remove stop words, numbers, single letters
n_token %>%
anti_join(stop_corpus, by = "word") %>%
mutate(word = gsub("\\d+", NA, word)) %>%
mutate(word = gsub("^[a-zA-Z]$", NA, word)) -> n_tokenTidy
# remove NA
n_tokenTidy %>%
filter(!is.na(word)) -> n_tokenTidy
stemmed %>%
group_by(word) %>%
summarise(count = n()) %>%
mutate(percent = round(count / sum(count) * 100,2)) %>%
arrange(desc(count)) %>%
filter(count > 50) %>%
datatable(., options = list(scrollX = TRUE, scrollY = "500px"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(xlsx)
library(here)
library(kableExtra)
library(DT)
library(purrr)
library(data.table)
library(tidytext)
library(dplyr)
library(lubridate)
library(anytime)
library(grid)
library(wordcloud)
library(reshape2)
library(ggraph)
library(widyr)
library(topicmodels)
library(ggthemes)
library(xlsx)
library(knitr)
library(kableExtra)
library(stopwords)
dt <- fread("D:/LUKA/Freelance/Mediatoolkit/MktFULLtxt.csv")
View(dt)
original <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/native1.xlsx", sheetIndex = 1) %>% mutate(V1 = as.numeric(V1))
variables <- read.xlsx("C:/Users/lukas/Dropbox/Članci/Native rad/Native.xlsx", sheetIndex = 1)
variables <- variables[,-c(23,24,25)]# %>% drop_na()
original <- original %>% filter(V1 %in% variables$V1)
dta <- merge(original, variables, by = "V1", all.x = TRUE)
dta$DATE <- as.Date(dta$DATE)
stemmed <- readRDS("C:/Users/Lukas/Dropbox/Mediatoolkit/native_token_stemm.rds")
stemmed <- readRDS("C:/Users/lukas/Dropbox/Članci/Native rad/native_token_stemm.rds")
stemmed <- stemmed %>%
rename("wordp" = "word") %>%
rename("word" = "transformed_column")
rm(dt)
View(variables)
View(dta)
View(original)
View(dta)
# articles over time
daily_counts <- dta %>%
group_by(DATE) %>%
summarise(count = n())
# descriptives
summ <- daily_counts %>%
summarize(min = min(count), max = max(count),
mean = mean(count), q1= quantile(count, probs = 0.25),
median = median(count), q3= quantile(count, probs = 0.75),
sd = sd(count)) %>%
mutate_if(is.numeric, round, digits=2)
summ
# create plot of articles over time
ggplot(data = daily_counts, aes(x = DATE, y = count)) +
geom_line() +
labs(x = "Date", y = "Number of Articles")
>>>>>>> 0e746d60b77243cb41bd3b12ea7f4d02cb4fa0f0
